#cloud-config
coreos:
  etcd2:
    advertise-client-urls: http://$private_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380
  fleet:
    metadata: env=${stack_name},platform=ec2,provider=aws,role=etcd2
    public-ip: $private_ipv4
  update:
    reboot-strategy: off
  units:
    - name: etcd2.service
      command: start
      drop-ins:
        - name: 60-etcd-peers.conf
          content: |
              [Service]
              EnvironmentFile=/etc/sysconfig/etcd-peers
    - name: fleet.service
      command: start
    - name: etcd-init.service
      command: start
      content: |
        [Unit]
        Description=etcd init
        Requires=docker.service
        After=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        EnvironmentFile=/etc/environment
        TimeoutStartSec=10min
        ExecStart=/opt/bin/etcd-init.sh
        [Install]
        WantedBy=multi-user.target
    - name: consul.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Consul Server
        Requires=docker.service
        After=docker.service
        Requires=etcd2.service
        After=etcd2.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/docker pull consul:0.8.3
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/sh -c "etcdctl set /global-admiral/consul/server/endpoint $private_ipv4"
        ExecStart=/usr/bin/docker run --rm --name %n \
                                  --net="host" \
                                  -v /consul/data:/consul/data \
                                  consul:0.8.3 agent -server -ui -bind=$private_ipv4 -client=0.0.0.0 -bootstrap
        ExecStop=/usr/bin/docker stop %n
        RestartSec=250
        Restart=always
write_files:
  - path: /opt/bin/update-window.sh
    permissions: 0700
    owner: root
    content: |
        #!/bin/bash
        # If etcd is active, this uses locksmith. Otherwise, it randomly delays the reboot.
        delay=$(/usr/bin/expr $RANDOM % 3600 )
        rebootflag='NEED_REBOOT'
        hostip=$(hostname -i | tr -d ' ')
        ismember=$(etcdctl member list |grep -Eo "(http://$hostip:2380)")

        if update_engine_client -status | grep $rebootflag;
        then
            echo -n "etcd2 is "
            if systemctl is-active etcd2 && [[ $ismember != "" ]];
            then
                echo "Update reboot with locksmithctl."
                locksmithctl reboot
            else
                echo "Update reboot in $delay seconds."
                sleep $delay
                reboot
            fi
        fi
        exit 0
  - path: /opt/bin/etcd-init.sh
    permissions: 0700
    owner: root
    content: |
      #!/bin/bash

      # dyamically create/join the etcd cluster by querying autoscaling group
      # see https://github.com/stakater/etcd-aws-cluster
      image=stakater/etcd-aws-cluster
      /usr/bin/docker run -v /etc/sysconfig/:/etc/sysconfig/ $image

      # upload etcd initial-cluster urls to s3 bucket for cluster's etcd_proxy
      /usr/bin/docker run -e S3BUCKET="${s3_bucket_uri}" -e ETCD_FOLDER_NAME="etcd-consul" -v /etc/sysconfig/:/etc/sysconfig/ --entrypoint /etcd-aws-proxy $image