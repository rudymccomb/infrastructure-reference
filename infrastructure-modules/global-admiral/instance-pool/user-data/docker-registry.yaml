#cloud-config

coreos:
  etcd2:
    proxy: on
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
  fleet:
    public-ip: $private_ipv4
    metadata: "env=${stack_name},platform=ec2,provider=aws,role=docker_registry"
    etcd_key_prefix: "/stakater/docker-registry/"
  update:
    reboot-strategy: off
  units:
    - name: etcd2.service
      command: start
      drop-ins:
        - name: 60-initial-cluster.conf
          content: |
            [Service]
            EnvironmentFile=/etc/sysconfig/initial-cluster
    - name: fleet.service
      command: start
    - name: docker.service
      command: start
    - name: update-initial-cluster.service
      command: start
      enable: true
      content: |
        [Unit]
        Description= Unit file to run update-initial-cluster script
        [Service]
        Type=oneshot
        TimeoutStartSec=0
        ExecStart=/usr/bin/sh -c "/opt/bin/update-initial-cluster.sh -b ${global_admiral_config_bucket}"
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
          [Unit]
          Description=Docker Socket for the API

          [Socket]
          ListenStream=2375
          Service=docker.service
          BindIPv6Only=both

          [Install]
          WantedBy=sockets.target
    - name: format-opt-data.service
      command: start
      content: |
        [Unit]
        Description=Formats opt data drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="LABEL=opt-data"
        Environment="DEV=/dev/xvdh"
        ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; then  wipefs -a -f $DEV && mkfs.ext4 -F -L $LABEL $DEV && echo wiped; fi"
    - name: opt-data.mount
      command: start
      content: |
        [Unit]
        Description=Mount data to /opt/data
        Requires=format-opt-data.service
        After=format-opt-data.service
        [Mount]
        What=/dev/xvdh
        Where=/opt/data
        Type=ext4
    - name: update-window.service
      command: start
      content: |
        [Unit]
        Description=Reboot if an update has been downloaded
        ConditionPathExists=/opt/bin/update-window.sh
        [Service]
        ExecStart=/opt/bin/update-window.sh
    - name: update-window.timer
      command: start
      content: |
        [Unit]
        Description=Reboot timer
        [Timer]
        OnCalendar=*-*-* 05,06:00/30:00
    - name: consul-agent.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Consul Agent
        Requires=docker.service
        Requires=etcd2.service
        After=etcd2.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/bash -c "/usr/bin/systemctl set-environment CONSUL_SERVER=$(etcdctl get /global-admiral/consul/server/endpoint)"
        ExecStartPre=/usr/bin/bash -c "/usr/bin/systemctl set-environment FALLBACK_HOST_DNS=$(cat /etc/resolv.conf | grep "nameserver" | grep -v "$private_ipv4"| grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')"
        ExecStartPre=/usr/bin/docker pull consul:0.8.3
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStart=/usr/bin/docker run --rm --name %n \
                                  --net="host" \
                                  -v /consul/data:/consul/data \
                                  -e 'CONSUL_ALLOW_PRIVILEGED_PORTS=' \
                                  consul:0.8.3 agent -retry-join=$${CONSUL_SERVER} -dns-port=53 -bind=$private_ipv4 -client=0.0.0.0 -recursor=$${FALLBACK_HOST_DNS}
        ExecStop=/usr/bin/docker stop %n
        RestartSec=110
        Restart=always
    - name: registrator.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Registrator, Registers running docker containers with consul
        After=docker.service
        Requires=docker.service
        After=consul-agent.service
        Requires=consul-agent.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/docker pull gliderlabs/registrator:latest
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=-/usr/bin/sleep 10
        ExecStart=/usr/bin/docker run --rm --name %n \
                                  --net "host" \
                                  -v /var/run/docker.sock:/tmp/docker.sock \
                                  gliderlabs/registrator:latest consul://localhost:8500
        ExecStop=/usr/bin/docker stop %n
        RestartSec=120
        Restart=always
    - name: gen-certificates.service
      command: start
      content: |
        [Unit]
        Description= Service for generating certificates for docker registry
        Requires=docker.service
        After=docker.service
        Before=registry.service
        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=300
        ExecStartPre=/usr/bin/docker pull stakater/ssl-certs-generator:1.0
        ExecStartPre=-/usr/bin/docker rm -f %n
        ExecStartPre=-/bin/mkdir -p /opt/data/registry/data
        ExecStartPre=-/bin/mkdir -p /opt/data/registry/ssl
        ExecStartPre=-/bin/mkdir -p /opt/data/registry/config
        ExecStart=/usr/bin/docker run --rm --name %n \
                  -v /opt/data/registry/ssl:/certs \
                  -e CA_SUBJECT=registry.${stack_name}.local \
                  -e SSL_DNS=registry.${stack_name}.local \
                  -e SSL_EXPIRE=24820 \
                  -e CA_EXPIRE=24820 \
                  stakater/ssl-certs-generator:1.0
        ExecStop=/usr/bin/sh -c "/etc/scripts/upload-registry-certs.sh /opt/data/registry/ssl registry-certificates"
        Restart=on-failure
        RestartSec=5s
    - name: registry.service
      command: start
      content: |
        [Unit]
        Description=Docker Image Registry
        Requires=docker.service
        After=docker.service
        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=300
        ExecStartPre=/usr/bin/docker pull stakater/docker-registry:2.6
        ExecStartPre=-/usr/bin/docker rm -f %n
        ExecStart=/usr/bin/docker run  --rm --name %n -p 5000:5000 \
                  -v /opt/data/registry:/opt/registry \
                  -e REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/opt/registry/data \
                  -e REGISTRY_HTTP_TLS_KEY=/opt/registry/ssl/key.pem \
                  -e REGISTRY_HTTP_TLS_CERTIFICATE=/opt/registry/ssl/cert.pem \
                  -e REGISTRY_HTTP_TLS_CLIENTCAS_0=/opt/registry/ssl/ca.pem \
                  --label SERVICE_NAME=${stack_name}-registry \
                  stakater/docker-registry:2.6
        RestartSec=5
        Restart=always
write_files:
    - path: /opt/bin/update-initial-cluster.sh
      permissions: 0700
      owner: root
      content: |
          #!/bin/bash
          # This script downloads the initial-cluster file from S3 buckets and updates etcd files

          BUCKET_NAME=""
          bOptionFlag=false;
          # Get options from the command line
          while getopts ":b:" OPTION
          do
              case $OPTION in
                  b)
                    BUCKET_NAME=$OPTARG
                    bOptionFlag=true;
                    ;;
                  *)
                    echo "Usage: $(basename $0) -b <Name of Bucket containing ETCD initial-cluster file>"
                    exit 0
                    ;;
              esac
          done

          if ! $bOptionFlag
          then
            echo "Usage: $(basename $0) -b <Name of Bucket containing ETCD initial-cluster file>"
            exit 0;
          fi

          # Download initial cluster file from S3 bucket
          docker run --rm --name aws-cli -v $(pwd)/aws-cli:/aws stakater/aws-cli aws s3 cp s3://$BUCKET_NAME/etcd/initial-cluster .

          # Wait for file to download
          sleep 5;

          if [ ! -f $(pwd)/aws-cli/initial-cluster ];
          then
            echo "Initial Cluster file not found in $(pwd)/aws-cli/"
            exit 1;
          fi

          initialClusterLocation="/etc/sysconfig"

          # check whether initial cluster is already downloaded or not
          if [ ! -f "$initialClusterLocation"/initial-cluster ];
          then
            sudo mkdir -p $initialClusterLocation;
            # Copy it to specified locations
            sudo cp $(pwd)/aws-cli/initial-cluster $initialClusterLocation
          else
            # Copy it to specified locations
            sudo cp $(pwd)/aws-cli/initial-cluster $initialClusterLocation
            sudo cp $(pwd)/aws-cli/initial-cluster /root/cloudinit

            # Replace the new ip in the etcd cluster file
            newip=$(cat $(pwd)/aws-cli/initial-cluster | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}');
            if [ "$newip" != "" ];
            then
              sudo sed -i -r 's/(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b'/$newip/ /var/lib/etcd2/proxy/cluster
            fi
          fi

          # Restart etcd and fleet
          sudo systemctl restart etcd2
          sudo systemctl restart fleet

          # Cleanup

          sudo rm -rf $(pwd)/aws-cli
          echo "Etcd initial cluster updated"